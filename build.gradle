buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
		jcenter()
		mavenCentral()
		maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
		classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'

// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'idea'

// Some variables so that I can keep things configurable in one tidy spot up here.
version = "${mod_version}"
group = "${mod_base}.${mod_id}"
archivesBaseName = mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.
println(
	'Java: ' + System.getProperty('java.version') + 
	' JVM: ' + System.getProperty('java.vm.version') + 
	' (' + System.getProperty('java.vendor') + ') ' +
	'Arch: ' + System.getProperty('os.arch')
)

sourceSets {
	api {
		java {
			srcDirs = ['src/api/java']
		}
	}
	main {
		java {
			srcDirs = ['src/main/java', 'src/api/java']
		}
		resources {
			srcDirs = ['src/main/resources', 'src/generated/resources']
		}
	}
}

configurations {
    apiCompile.extendsFrom(compile)
    apiImplementation.extendsFrom(implementation)
    apiCompileOnly.extendsFrom(compileOnly)
}

// Include resources generated by data generators.
//sourceSets.main.resources { 
//	srcDir 'src/generated/resources' 
//}
//sourceSets.main.java {
//	srcDir 'src/api/java'
//}

minecraft {
	mappings channel: "official", version: "1.16.5"
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
			
			args '--mixin=etimod.mixin.json'

            mods {
                "${mod_id}" {
                    source sourceSets.main
					source sourceSets.api
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
					source sourceSets.api
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "etimod.refmap.json"
}

repositories {
	maven { url 'https://maven.blamejared.com' } // For hwyla
	maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    implementation 'org.jetbrains:annotations:20.1.0'
    minecraft 'net.minecraftforge:forge:1.16.5-36.0.60'
	annotationProcessor 'org.spongepowered:mixin:0.8.2:processor'
	
	// Deps:
	compile fg.deobf("curse.maven:hwyla-253449:3033593")
    //compile fg.deobf("curse.maven:mantle-74924:2713386")
    //compile fg.deobf("curse.maven:tconstruct-74072:2902483")
}


// Taken from Mekanism: https://github.com/mekanism/Mekanism/blob/v10.1/build.gradle#L155-L180
// And then taken again from SizableShrimp/ForgeTemplate https://github.com/SizableShrimp/ForgeTemplate/blob/62322c3715c4a842bf5edff6e678a3d519173f49/build.gradle#L159-L182
def resource_targets = ["META-INF/mods.toml", "pack.mcmeta"]
task replaceResources(type: Copy) {
    dependsOn(jar)
    outputs.upToDateWhen { false }
    def spec = copySpec {
        from(sourceSets.main.resources) {
            include resource_targets
			
			expand "project": project, "mod_id": mod_id, "mod_version": mod_version, "mod_name": mod_name, "mod_author": mod_author, "mod_desc": mod_desc
        }
    }
    with spec
    into "$buildDir/resources/main/"
	
    if (new File("$rootDir/bin/main/").exists()) {
        copy {
            with spec
            into "$rootDir/bin/main"
        }
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.FAIL
    // Exclude the resource targets as we manually handle those and don't want them to invalidate our cache
    exclude resource_targets
    finalizedBy replaceResources
}

jar {
	from sourceSets.api.output
    from sourceSets.main.output

    manifest {
        attributes([
            "Specification-Title": archivesBaseName,
            "Specification-Vendor": mod_base,
            "Specification-Version": "1",
            "Implementation-Title": mod_name,
            "Implementation-Version": mod_version,
            "Implementation-Vendor" : mod_base,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			"MixinConfigs": "etimod.mixin.json"
        ])
    }
}

task apiJar(type: Jar) {
    archiveClassifier = "api"
    from sourceSets.api.output
    afterEvaluate { finalizedBy('reobfJar') }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

build.dependsOn tasks.apiJar