buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
		jcenter()
		mavenCentral()
		maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
		classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'

// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

def author = 'etithespirit'
archivesBaseName = 'etimod'
version = 'ALPHA-8.0'
group = "${author}.${archivesBaseName}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
	mappings channel: "official", version: "1.16.5"
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
			
			args '--mixin=etimod.mixin.json'

            mods {
                etimod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                etimod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', archivesBaseName, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                etimod {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "etimod.refmap.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { 
	srcDir 'src/generated/resources' 
}

repositories {
	maven { url 'https://maven.blamejared.com' }
	maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}


dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.0.60'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
	
	annotationProcessor 'org.spongepowered:mixin:0.8.2:processor'
	
	compile fg.deobf("curse.maven:hwyla-253449:3033593")
}

jar {
    manifest {
        attributes([
            "Specification-Title": archivesBaseName,
            "Specification-Vendor": "etithespirit",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": version,
            "Implementation-Vendor" : "etithespirit",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			"MixinConfigs": "etimod.mixin.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
