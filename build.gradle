buildscript {
	dependencies {
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.+'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.7.0"
        // OPTIONAL Kotlin Serialization plugin
        classpath 'org.jetbrains.kotlin:kotlin-serialization:1.7.0'
	}
}

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'kotlin'

// Adds KFF as dependency and Kotlin libs to the runtime classpath
// **If you already know how to add the Kotlin plugin to Gradle, this is the only line you need for KFF
apply from: 'https://raw.githubusercontent.com/thedarkcolour/KotlinForForge/site/thedarkcolour/kotlinforforge/gradle/kff-3.7.1.gradle'

version = "${mod_version}"
group = "${mod_base}.${mod_id}"
//archivesBaseName = "${mod_id}-${minecraft_version}"
archivesBaseName = "${mod_id}"

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

sourceSets {
    api {
        java {
            srcDirs = ['src/api/java']
        }
    }
    extension {
        java {
            srcDirs = ['src/extension/java']
        }
    }
    main {
        java {
            srcDirs = ['src/main/java', 'src/api/java']
        }
        resources {
            srcDirs = ['src/main/resources', 'src/generated/resources']
        }
    }
}

configurations {
    apiCompile.extendsFrom(compile)
    apiImplementation.extendsFrom(implementation)
    apiCompileOnly.extendsFrom(compileOnly)

    extCompile.extendsFrom(compile)
    extImplementation.extendsFrom(implementation)
    extCompileOnly.extendsFrom(compileOnly)

    // configuration that holds jars to embed inside the jar
    //embed
    //embed.transitive = false;
}

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.

    // mappings channel: 'official', version: '1.19.2'
    mappings channel: 'parchment', version: '2022.11.27-1.19.2'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            // property 'forge.enabledGameTestNamespaces', 'orimod'

            args '--mixin=orimod.mixin.json --useOriModTraceLogs --username Dev#####'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        /*
        clientVerboseLog {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            // property 'forge.enabledGameTestNamespaces', 'orimod'

            args '--mixin=orimod.mixin.json --useOriModTraceLogs'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
        */

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // property 'forge.enabledGameTestNamespaces', 'orimod'

            args '--mixin=orimod.mixin.json'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'orimod'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "orimod.refmap.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }

    maven { url 'https://maven.blamejared.com' } // For hwyla
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url = uri("https://maven.dbotthepony.ru")

        content {
            includeGroup("ru.dbotthepony")
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
	minecraft 'net.minecraftforge:forge:1.19.2-43.2.0'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    implementation fg.deobf("curse.maven:configured-457570:4011355")
    implementation fg.deobf("curse.maven:catalogue-459701:3873264")
    implementation fg.deobf("curse.maven:jade-324717:4096513") // full build
    compileOnly fg.deobf("ru.dbotthepony:overdrive-that-matters:1.0-SNAPSHOT")
    compileOnly fg.deobf("curse.maven:biomes-o-plenty-220318:4128419")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// The purpose of this block is to make my mods.toml more straightforward. mods.toml includes gradle-style variables i.e. ${mod_id} in strings.
// The following block will actually expand the variables from *this* build file into the mods.toml, and then copy the expanded
// (and thus valid) mods.toml into the build directory.

// This comes from 1.18.2
String[] manualRsrc = ["META-INF/mods.toml", "pack.mcmeta"] // These are the aforementioned files that use variables.
task replaceResources(type: Copy) {
    // Creds: SizableShrimp/ForgeTemplate https://github.com/SizableShrimp/ForgeTemplate/blob/62322c3715c4a842bf5edff6e678a3d519173f49/build.gradle#L159-L182
    dependsOn(jar)
    outputs.upToDateWhen { false }

    // Copy the corrected mods.toml and pack.mcmeta (which use gradle variables)
    // after substituting in the actual values.
    def spec = copySpec {
        from(sourceSets.main.resources) {
            include manualRsrc
            expand "project": project, "mod_id": mod_id,
                    "mod_version": mod_version, "mod_name": mod_name,
                    "mod_author": mod_author, "mod_desc": mod_desc
        }
    }
    with spec
    into "$buildDir/resources/main/"
}

// Copies the generated sounds.json from my custom data generator
String[] soundRsrc = ["assets/orimod/sounds.json"]
task copyProcgenSoundRsrc(type: Copy) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    dependsOn(jar)
    outputs.upToDateWhen { false }

    def spec = copySpec {
        from(sourceSets.main.resources) {
            include soundRsrc
        }
    }
    with spec
    into "$buildDir/resources/main"
}


processResources {
    duplicatesStrategy = DuplicatesStrategy.WARN

    // Exclude the resource targets as I manually handle those
    exclude manualRsrc
    exclude soundRsrc
    finalizedBy replaceResources
    finalizedBy copyProcgenSoundRsrc
}

jar {
    from sourceSets.api.output
    from sourceSets.main.output
    //into('/META-INF/libraries') {
    //    from configurations.embed
    //}
    duplicatesStrategy = DuplicatesStrategy.INCLUDE // Just overwrite

    manifest {
        attributes([
                //"ContainedDeps": configurations.embed.collect { it.getName() }.join(' '),
                "Specification-Title": archivesBaseName,
                "Specification-Vendor": mod_base,
                "Specification-Version": "1",
                "Implementation-Title": mod_name,
                "Implementation-Version": mod_version,
                "Implementation-Vendor" : mod_base,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "orimod.mixin.json"
        ])
    }
}

task apiJar(type: Jar) {
    archiveClassifier = "api"
    from sourceSets.api.output
    afterEvaluate { finalizedBy('reobfJar') }
}

task apiJarSrc(type: Jar) {
    archiveClassifier = "sources"
    from sourceSets.api.java
    afterEvaluate { finalizedBy('reobfJar') }
}

task extensionJar(type: Jar) {
    archiveClassifier = "extensions"
    from sourceSets.extension.java
    afterEvaluate { finalizedBy('reobfJar') }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

build.dependsOn tasks.apiJar
build.dependsOn tasks.apiJarSrc
build.dependsOn tasks.extensionJar