buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.+'
        classpath group: 'org.parchmentmc', name: 'librarian', version: '1.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'idea'

// Some variables so that I can keep things configurable in one tidy spot up here.
version = "${mod_version}"
group = "${mod_base}.${mod_id}"
archivesBaseName = mod_id

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

sourceSets {
    api {
        java {
            srcDirs = ['src/api/java']
        }
    }
    main {
        java {
            srcDirs = ['src/main/java', 'src/api/java']
        }
        resources {
            srcDirs = ['src/main/resources', 'src/generated/resources']
        }
    }
}

configurations {
    apiCompile.extendsFrom(compile)
    apiImplementation.extendsFrom(implementation)
    apiCompileOnly.extendsFrom(compileOnly)
}

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'official', version: '1.18.1'
    mappings channel: 'parchment', version: '2022.01.23-1.18.1'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            args '--mixin=orimod.mixin.json'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            args '--mixin=orimod.mixin.json'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'


            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "orimod.refmap.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url 'https://maven.blamejared.com' } // For hwyla
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    implementation 'org.jetbrains:annotations:20.1.0'
    minecraft 'net.minecraftforge:forge:1.18.1-39.0.79'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    implementation fg.deobf("curse.maven:configured-457570:3640884")
    //implementation fg.deobf("curse.maven:jade-324717:3614181") // api
    implementation fg.deobf("curse.maven:jade-324717:3614180") // full build
    //implementation fg.deobf("curse.maven:catalogue-459701:3559402")

    /*
    compileOnly = the dependency's sources are available in your dev environment
    runtimeOnly = the dependency will be on the classpath (the mod will be "installed") while running from your dev environment
    implementation = both of the above

    Thanks Commoble!
     */

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// Taken from Mekanism: https://github.com/mekanism/Mekanism/blob/v10.1/build.gradle#L155-L180
// And then taken again from SizableShrimp/ForgeTemplate https://github.com/SizableShrimp/ForgeTemplate/blob/62322c3715c4a842bf5edff6e678a3d519173f49/build.gradle#L159-L182
String[] resource_targets = ["META-INF/mods.toml", "pack.mcmeta"]
task replaceResources(type: Copy) {
    dependsOn(jar)
    outputs.upToDateWhen { false }

    def spec = copySpec {
        from(sourceSets.main.resources) {
            include resource_targets
            expand "project": project, "mod_id": mod_id, "mod_version": mod_version, "mod_name": mod_name, "mod_author": mod_author, "mod_desc": mod_desc//, "file": [ jarVersion: mod_version ]
        }
    }
    with spec
    into "$buildDir/resources/main/"

    def target = new File("$rootDir/bin/main/");
    if (target.exists()) {
        copy {
            with spec
            into "$rootDir/bin/main"
        }
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.WARN
    // Exclude the resource targets as we manually handle those and don't want them to invalidate our cache
    exclude resource_targets
    finalizedBy replaceResources
}

jar {
    from sourceSets.api.output
    from sourceSets.main.output
    duplicatesStrategy = DuplicatesStrategy.WARN

    manifest {
        attributes([
                "Specification-Title": archivesBaseName,
                "Specification-Vendor": mod_base,
                "Specification-Version": "1",
                "Implementation-Title": mod_name,
                "Implementation-Version": mod_version,
                "Implementation-Vendor" : mod_base,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "orimod.mixin.json"
        ])
    }
}

task apiJar(type: Jar) {
    archiveClassifier = "api"
    from sourceSets.api.output
    afterEvaluate { finalizedBy('reobfJar') }
}

task apiJarSrc(type: Jar) {
    archiveClassifier = "sources"
    from sourceSets.api.java
    afterEvaluate { finalizedBy('reobfJar') }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    /*
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }*/
}

build.dependsOn tasks.apiJar
build.dependsOn tasks.apiJarSrc